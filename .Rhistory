##or
#ref_func <- transform_data(IPCO_Healthy$KEGG,"proportion")
#if query genus table is count data
#query_genus <- transform_data(genus_table,"count")
#Run IPCO
#Note: all samples should be in columns and features (func/taxa) in rows. If not, transpose the matrix
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
inferred_MetaCyc
ref_func <- filter_functionality(ref_func, "metacyc",IPCO_Healthy$MetaCyc_coverage,threshold=0.4) # Filtering
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
#taxrank parameter is in the latest version
phyloseq_genus <- tax_glom(pseq, taxrank="Genus")
#If the above step is already done, then you can start from here.
#Convert phyloseq genus/species level object to matrix
genus_table <- as(otu_table(phyloseq_genus), "matrix")
##Step 2: Using IPCO
#load refernce data IPCO_Healthy/IPCO_HMP
library(IPCO)
data(IPCO_Healthy)
ref_genus <- transform_data(IPCO_Healthy$Genus,"relab")
ref_func <- transform_data(IPCO_Healthy$MetaCyc,"proportion")
#ref_func <- filter_functionality(ref_func, "metacyc",IPCO_Healthy$MetaCyc_coverage,threshold=0.4) # Filtering
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
##or
#ref_func <- transform_data(IPCO_Healthy$KEGG,"proportion")
#if query genus table is count data
#query_genus <- transform_data(genus_table,"count")
#Run IPCO
#Note: all samples should be in columns and features (func/taxa) in rows. If not, transpose the matrix
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
inferred_MetaCyc
heatmap(inferred_MetaCyc)
install.packages("pacman")
library(pacman)
pacman::p_load(Rserve, ellipse, scatterplot3d, Cairo, randomForest, caTools, e1071, som, impute, pcaMethods, RJSONIO, ROCR, globaltest, GlobalAncova, Rgraphviz, preprocessCore, genefilter, pheatmap, SSPA, sva, Rcpp, pROC, data.table, limma, car, fitdistrplus, lars, Hmisc, magrittr, methods, xtable, pls, caret, lattice, igraph, gplots, KEGGgraph, reshape, RColorBrewer, tibble, siggenes, plotly, xcms, CAMERA, fgsea, MSnbase)
library(devtools)
devtools::install_github("xia-lab/MetaboAnalystR", build_vignettes=TRUE)
class(inferred_MetaCyc)
library(lattice)
levelplot(inferred_MetaCyc)
levelplot(inferred_MetaCyc[1:ncol(inferred_MetaCyc),ncol(inferred_MetaCyc):1])
heatmap(m,symm=TRUE,col=new.palette(20))
heatmap(inferred_MetaCyc,symm=TRUE,col=new.palette(20))
heatmap(inferred_MetaCyc,symm=TRUE)
heatmap(inferred_MetaCyc)
library(plotly)
packageVersion('plotly')
p <- plot_ly(inferred_MetaCyc = volcano, type = "heatmap")
p
install("made4")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("made4")
library(made4)
browseVignettes("made4")
overview(inferred_MetaCyc)
k.coa<- ord(inferred_MetaCyc, type="coa")
k.coa
plotgenes(k.coa)
library(gcookbook)
library(tidyverse)
#library(gdtools)
#The phyloseq package seeks to address issues with multiple microbiome analysis packages by providing a set of functions that internally manage the organizing, linking, storing, and analyzing of phylogenetic sequencing data. In general, this package is used for UniFrac analyses.
library(phyloseq)
library(microbiome)
library(knitr)
library(ggpubr)
#library(phylogeo)
library(dplyr)
#Graphing package used in phyloseq. To edit the default setting of a plot, you need to use functions in this package.
library(ggplot2)
library(viridis)
library(cowplot)
# install.packages("devtools")
library(devtools)
# install_github("opisthokonta/tsnemicrobiota")
library(tsnemicrobiota)
# check you've installed this library
library(forcats)
library(IPCO)
library(phylosmith)
library(phyloseq)
data(atlas1006)
pseq <- baseline(atlas1006)
#taxrank parameter is in the latest version
phyloseq_genus <- tax_glom(pseq, taxrank="Genus")
#If the above step is already done, then you can start from here.
#Convert phyloseq genus/species level object to matrix
genus_table <- as(otu_table(phyloseq_genus), "matrix")
##Step 2: Using IPCO
#load refernce data IPCO_Healthy/IPCO_HMP
library(IPCO)
data(IPCO_Healthy)
#We recommend Hellinger transformation. To be used on count/prop/relative abundance data
ref_genus <- transform_data(IPCO_Healthy$Genus,"relab")
ref_func <- transform_data(IPCO_Healthy$MetaCyc,"proportion")
#ref_func <- filter_functionality(ref_func, "metacyc",IPCO_Healthy$MetaCyc_coverage,threshold=0.4) # Filtering
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
##or
#ref_func <- transform_data(IPCO_Healthy$KEGG,"proportion")
#if query genus table is count data
#query_genus <- transform_data(genus_table,"count")
#Run IPCO
#Note: all samples should be in columns and features (func/taxa) in rows. If not, transpose the matrix
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
library(made4)
overview(inferred_MetaCyc)
overview
help(overview)
overview(inferred_MetaCyc)
k.coa<- ord(inferred_MetaCyc, type="coa")
summary(k.coa$ord)
plotgenes(k.coa)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/maryam/Scripts/Microbiome")
#setwd("/Users/maryam/Scripts/Microbiome")
## Get data
library(foreign)
library(stargazer)
library(psych)
library(plyr)
library(xtable)
library(car)
#library(dplyr)
library(scales)
library(reshape)
library(gmodels)
library(nnet)
library(tidyr)
library(sjmisc)
library(RColorBrewer)
library(htmltools)
library(broom)
#library(hrbrthemes)
library(gcookbook)
library(tidyverse)
#library(gdtools)
#The phyloseq package seeks to address issues with multiple microbiome analysis packages by providing a set of functions that internally manage the organizing, linking, storing, and analyzing of phylogenetic sequencing data. In general, this package is used for UniFrac analyses.
library(phyloseq)
library(microbiome)
library(knitr)
library(ggpubr)
#library(phylogeo)
library(dplyr)
#Graphing package used in phyloseq. To edit the default setting of a plot, you need to use functions in this package.
library(ggplot2)
library(viridis)
library(cowplot)
# install.packages("devtools")
library(devtools)
# install_github("opisthokonta/tsnemicrobiota")
library(tsnemicrobiota)
# Data from http://dx.doi.org/10.1038/ncomms7342
data(atlas1006)
pseq <- baseline(atlas1006) # only uses the baseline samples. This is n=1006
# Create mnd variable
# grabs the nationality from phyloseq
test <- get_variable(pseq, "nationality" )
# check you've installed this library
library(forcats)
# this collapses the two varialbes into a new variable AB in this case. The command for multiple changes is fct_collapse(x, AB = c("A","B"), DE = c("D","E"))
test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
# reorder
test <- factor(test, levels = (c("LOW", "MEDIUM", "HIGH")))
levels(test)
# creates a new variable in the phyloseq called mnd
sample_data(pseq)$mnd = test
# checks that it has worked.
get_variable(pseq, "mnd")
test
mnd.class <- get_variable(pseq, "nationality" )
mnd.class <- factor(test, levels = (c("LOW", "MEDIUM", "HIGH")))
levels(test)
overview(inferred_MetaCyc,classvec=mnd.class, labels=mnd.class)
overview(inferred_MetaCyc,classvec=mnd.class, labels=c("red", "blue", "yellow"))
plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
p <- plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
p
plotarrays(k.coa, arraylabels=mnd.class)
mnd.class
plotgenes(k.coa)
k.coa2<-ord(k.data, classvec=mnd.class)
k.coa2<-ord(pseq, classvec=mnd.class)
k.coa2<-ord(inferred_MetaCyc, classvec=mnd.class)
plot(k.coa2)
p <- plot(k.coa2)
p
k.bga<-bga(inferred_MetaCyc, type="coa", classvec=mnd.class)
between.graph(k.bga, ax=1)
plot(k.bga, genelabels=gene.symbs)
p <- overview(inferred_MetaCyc)
library(gcookbook)
library(tidyverse)
#library(gdtools)
#The phyloseq package seeks to address issues with multiple microbiome analysis packages by providing a set of functions that internally manage the organizing, linking, storing, and analyzing of phylogenetic sequencing data. In general, this package is used for UniFrac analyses.
library(phyloseq)
library(microbiome)
library(knitr)
library(ggpubr)
#library(phylogeo)
library(dplyr)
#Graphing package used in phyloseq. To edit the default setting of a plot, you need to use functions in this package.
library(ggplot2)
library(viridis)
library(cowplot)
# install.packages("devtools")
library(devtools)
# install_github("opisthokonta/tsnemicrobiota")
library(tsnemicrobiota)
# check you've installed this library
library(forcats)
library(IPCO)
library(phylosmith)
library(phyloseq)
data(atlas1006)
pseq <- baseline(atlas1006)
##Step 1: Extract the required matrix from Phyloseq object
##first convert the OTU level phyloseq object to species/genus level phyloseq object. Depending on the phyloseq version the taxrank or taxlevel parameter would be used.
#taxlevel parameter is probably for older version to the best of my knowledge
#phyloseq_genus <- tax_glom(pseq, taxlevel="Genus")
#taxrank parameter is in the latest version
phyloseq_genus <- tax_glom(pseq, taxrank="Genus")
#If the above step is already done, then you can start from here.
#Convert phyloseq genus/species level object to matrix
genus_table <- as(otu_table(phyloseq_genus), "matrix")
##Step 2: Using IPCO
#load refernce data IPCO_Healthy/IPCO_HMP
library(IPCO)
data(IPCO_Healthy)
#Do normalisation/transform as suggested as an where required. If the phyloseq data is already normalised and doesnot wish to renormalise, then the user doesnot have to follow IPCO normalisation.
#We recommend Hellinger transformation. To be used on count/prop/relative abundance data
ref_genus <- transform_data(IPCO_Healthy$Genus,"relab")
ref_func <- transform_data(IPCO_Healthy$MetaCyc,"proportion")
#ref_func <- filter_functionality(ref_func, "metacyc",IPCO_Healthy$MetaCyc_coverage,threshold=0.4) # Filtering
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
##or
#ref_func <- transform_data(IPCO_Healthy$KEGG,"proportion")
#if query genus table is count data
#query_genus <- transform_data(genus_table,"count")
#Run IPCO
#Note: all samples should be in columns and features (func/taxa) in rows. If not, transpose the matrix
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
# Create mnd variable
# grabs the nationality from phyloseq
class <- get_variable(pseq, "nationality" )
# check you've installed this library
library(forcats)
# this collapses the two varialbes into a new variable AB in this case. The command for multiple changes is fct_collapse(x, AB = c("A","B"), DE = c("D","E"))
test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
# reorder
mnd.class <- factor(test, levels = (c("LOW", "MEDIUM", "HIGH")))
library(made4)
p <- overview(inferred_MetaCyc)
p <- overview(inferred_MetaCyc,classvec=mnd.class, labels=c("red", "blue", "yellow"))
k.coa<- ord(inferred_MetaCyc, type="coa")
summary(k.coa$ord)
plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
plotarrays(k.coa, arraylabels=mnd.class)
p <- plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
k.coa2<-ord(inferred_MetaCyc, classvec=mnd.class)
p <- plot(k.coa2)
mnd.class
p <- plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
k.coa<- ord(inferred_MetaCyc, type="coa")
p <- plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow","black" ), genecol="grey3")
plot(k.coa)
p <- plot(k.coa)
p
library(made4)
library(ade4)
p <- plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
p <- plot(k.coa2)
heatmap(inferred_MetaCyc)
library(phyloseq)
library(microbiome)
library(knitr)
library(ggpubr)
#library(phylogeo)
library(dplyr)
#Graphing package used in phyloseq. To edit the default setting of a plot, you need to use functions in this package.
library(ggplot2)
library(viridis)
library(cowplot)
# install.packages("devtools")
library(devtools)
# install_github("opisthokonta/tsnemicrobiota")
library(tsnemicrobiota)
# check you've installed this library
library(forcats)
library(IPCO)
library(phylosmith)
library(phyloseq)
data(atlas1006)
pseq <- baseline(atlas1006)
s in the latest version
#taxrank parameter is in the latest version
phyloseq_genus <- tax_glom(pseq, taxrank="Genus")
#If the above step is already done, then you can start from here.
#Convert phyloseq genus/species level object to matrix
genus_table <- as(otu_table(phyloseq_genus), "matrix")
##Step 2: Using IPCO
#load refernce data IPCO_Healthy/IPCO_HMP
library(IPCO)
data(IPCO_Healthy)
#Do normalisation/transform as suggested as an where required. If the phyloseq data is already normalised and doesnot wish to renormalise, then the user doesnot have to follow IPCO normalisation.
#We recommend Hellinger transformation. To be used on count/prop/relative abundance data
ref_genus <- transform_data(IPCO_Healthy$Genus,"relab")
ref_func <- transform_data(IPCO_Healthy$MetaCyc,"proportion")
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
class <- get_variable(pseq, "nationality" )
# check you've installed this library
library(forcats)
# this collapses the two varialbes into a new variable AB in this case. The command for multiple changes is fct_collapse(x, AB = c("A","B"), DE = c("D","E"))
test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
# reorder
mnd.class <- factor(test, levels = (c("LOW", "MEDIUM", "HIGH")))
library(made4)
library(ade4)
p <- overview(inferred_MetaCyc)
p
overview(inferred_MetaCyc)
swd(/Users/Nik/globalmicrobiome)
swd('/Users/Nik/globalmicrobiome')
setwd("/Users/Nik/globalmicrobiome)")
setwd("/Users/Nik/globalmicrobiome)")
setwd("/Users/Nik/globalmicrobiome")
library(gcookbook)
library(tidyverse)
#library(gdtools)
#The phyloseq package seeks to address issues with multiple microbiome analysis packages by providing a set of functions that internally manage the organizing, linking, storing, and analyzing of phylogenetic sequencing data. In general, this package is used for UniFrac analyses.
library(phyloseq)
library(microbiome)
library(knitr)
library(ggpubr)
#library(phylogeo)
library(dplyr)
#Graphing package used in phyloseq. To edit the default setting of a plot, you need to use functions in this package.
library(ggplot2)
library(viridis)
library(cowplot)
# install.packages("devtools")
library(devtools)
# install_github("opisthokonta/tsnemicrobiota")
library(tsnemicrobiota)
# check you've installed this library
library(forcats)
library(IPCO)
library(phylosmith)
library(phyloseq)
data(atlas1006)
pseq <- baseline(atlas1006)
##Step 1: Extract the required matrix from Phyloseq object
##first convert the OTU level phyloseq object to species/genus level phyloseq object. Depending on the phyloseq version the taxrank or taxlevel parameter would be used.
#taxlevel parameter is probably for older version to the best of my knowledge
#phyloseq_genus <- tax_glom(pseq, taxlevel="Genus")
#taxrank parameter is in the latest version
phyloseq_genus <- tax_glom(pseq, taxrank="Genus")
#If the above step is already done, then you can start from here.
#Convert phyloseq genus/species level object to matrix
genus_table <- as(otu_table(phyloseq_genus), "matrix")
##Step 2: Using IPCO
#load refernce data IPCO_Healthy/IPCO_HMP
library(IPCO)
data(IPCO_Healthy)
#Do normalisation/transform as suggested as an where required. If the phyloseq data is already normalised and doesnot wish to renormalise, then the user doesnot have to follow IPCO normalisation.
#We recommend Hellinger transformation. To be used on count/prop/relative abundance data
ref_genus <- transform_data(IPCO_Healthy$Genus,"relab")
ref_func <- transform_data(IPCO_Healthy$MetaCyc,"proportion")
#ref_func <- filter_functionality(ref_func, "metacyc",IPCO_Healthy$MetaCyc_coverage,threshold=0.4) # Filtering
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
##or
#ref_func <- transform_data(IPCO_Healthy$KEGG,"proportion")
#if query genus table is count data
#query_genus <- transform_data(genus_table,"count")
#Run IPCO
#Note: all samples should be in columns and features (func/taxa) in rows. If not, transpose the matrix
inferred_MetaCyc <- IPCO(ref_func,ref_genus,genus_table)
# Create mnd variable
# grabs the nationality from phyloseq
class <- get_variable(pseq, "nationality" )
# check you've installed this library
library(forcats)
# this collapses the two varialbes into a new variable AB in this case. The command for multiple changes is fct_collapse(x, AB = c("A","B"), DE = c("D","E"))
test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
con.class <- get_variable(pseq, "nationality" )
mnd.class <- fct_collapse(con.class, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
mnd.class <- factor(test, levels = (c("LOW", "MEDIUM", "HIGH")))
mnd.class <- factor(mnd.class, levels = (c("LOW", "MEDIUM", "HIGH")))
library(made4)
library(ade4)
overview(inferred_MetaCyc)
p <- overview(inferred_MetaCyc)
p
k.coa<- ord(inferred_MetaCyc, type="coa")
summary(k.coa$ord)
plot(k.coa)
p <- overview(inferred_MetaCyc)
p <- overview(inferred_MetaCyc)
p <- overview(inferred_Met
)
k.coa<- ord(inferred_MetaCyc, type="coa")
summary(k.coa$ord)
p <- plot(k.coa)
k.coa<- ord(inferred_MetaCyc, type="coa")
summary(k.coa$ord)
p <- plot(k.coa)
p <- plot(k.coa, classvec=mnd.class, arraycol=c("red", "blue", "yellow" ), genecol="grey3")
plotarrays(k.coa, arraylabels=mnd.class)
plotgenes(k.coa)
plotgenes(k.coa)
k.coa2<-ord(inferred_MetaCyc, classvec=mnd.class)
p <- plot(k.coa2)
k.bga<-bga(inferred_MetaCyc, type="coa", classvec=mnd.class)
between.graph(k.bga, ax=1)
k.bga<-bga(inferred_MetaCyc, type="coa", classvec=mnd.class)
between.graph(k.bga, ax=1)
heatmap(inferred_MetaCyc)
p <- plot_ly(inferred_MetaCyc = volcano, type = "heatmap")
heatmap(inferred_MetaCyc)
levelplot(inferred_MetaCyc[1:ncol(inferred_MetaCyc),ncol(inferred_MetaCyc):1])
help(heatmap)
library(pheatmap)
pheatmap(inferred_MetaCyc)
pheatmap(inferred_MetaCyc, cluster_cols = mnd.class)
pheatmap(inferred_MetaCyc)
ref_func <- filter_functionality(ref_func, "metacyc", IPCO_Healthy$MetaCyc_coverage)
inferred_MetaCyc
View(inferred_MetaCyc)
View(inferred_MetaCyc)
heatmap(inferred_MetaCyc)
View(inferred_MetaCyc)
View(inferred_MetaCyc)
str(inferred_MetaCyc)
names <- 2PHENDEG
names <- '2PHENDEG''
''
names <- '2PHENDEG'
names
x <- subset(inferred_MetaCyc, rownames(inferred_MetaCyc) %in% names)
x
x <- subset(inferred_MetaCyc, rownames(inferred_MetaCyc) == names)
x
BiocManager::install("curatedMetagenomicData")
BiocManager::install("curatedMetagenomicData")
BiocManager::install("curatedMetagenomicData")
install.packages("curl")
sudo xcodebuild -license
install.packages("curl")
install.packages("raster")
library(curatedMetagenomicData)
BiocManager::install("curatedMetagenomicData")
library(curatedMetagenomicData)
library(curatedMetagenomicData)
install.packages("ExperimentHub")
BiocManager::install("ExperimentHub")
library(ExperimentHub)
#BiocManager::install("curatedMetagenomicData")
#BiocManager::install("ExperimentHub")
library(ExperimentHub)
library(curatedMetagenomicData)
suppressPackageStartupMessages(library(ExperimentHub))
library(phyloseq)
library(microbiome)
eh = ExperimentHub()
myquery = query(eh, "curatedMetagenomicData")
?combined_metadata
View(combined_metadata)
table(combined_metadata$disease)
# Get the stool samples
esl <- curatedMetagenomicData("*metaphlan_bugs_list.stool*", dryrun = FALSE)
# merge
eset <- mergeData(esl)
# the relab=FALSE is essential as it Absolute Raw Count Data
pseq = ExpressionSet2phyloseq(eset,relab=FALSE ,simplify = TRUE, phylogenetictree = TRUE)
#For the MetaPhlAn2 bugs datasets (but not other data types), you gain a lot of taxonomy-aware, ecological analysis and plotting by conversion to a phyloseq class object. curatedMetagenomicData provides the ExpressionSet2phyloseq() function to make this easy:
# Create mnd variable
# grabs the nationality from phyloseq
test <- get_variable(pseq, "country" )
# check you've installed this library
library(forcats)
table(test)
# this collapses the two varialbes into a new variable AB in this case. The command for multiple changes is fct_collapse(x, AB = c("A","B"), DE = c("D","E"))
# Not used BGD Bangladesh , CAN Canada, CHN, China. DNK denmark, FJI Figi, HUN Hungry, ISL isle of man , MDG, MNG mongolia, PER Iran, RUS RUSSIA,
test <- fct_collapse(test, LOW = c("NOR","SWE","FIN") , MEDIUM = c("ITA","AUT","DEU","GBR","ESP","FRA","LUX","NLD"), HIGH = c("USA") )
#test <- fct_collapse(test, LOW = c("Scandinavia","EasternEurope") , MEDIUM = c("SouthEurope","CentralEurope", "UKIE"), HIGH = c("US") )
# reorder
test <- factor(test, levels = (c("LOW", "MEDIUM", "HIGH")))
levels(test)
# creates a new variable in the phyloseq called mnd
sample_data(pseq)$mnd = test
# Remove   everything without a country
pseq.subset <- subset_samples(pseq, !is.na(mnd))
# checks that it has worked.
get_variable(pseq.subset, "mnd")
pseq.subset
pseq.csubset <- core(pseq.subset, detection = 0.1/100, prevalence = 50/100)
any(taxa_sums(pseq.csubset) == 0)
any(taxa_sums(pseq.subset) == 0)
any(taxa_sums(pseq.csubset) == 0)
diversities(pseq.csubset, index = "all")
tab <- diversities(pseq.csubset)
barplot(sort(taxa_sums(pseq.csubset), TRUE)[1:20] / nsamples(pseq.csubset),
ylab = "Total counts", las = 2)
pseq.csubset
rank(pseq.csubset)
wt = UniFrac(pseq.csubset, weighted=TRUE, normalized=FALSE,
parallel=FALSE, fast=TRUE)
